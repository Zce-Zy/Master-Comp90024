{"version":3,"sources":["ts/components/Header/index.tsx","ts/configurations/google.ts","ts/constants/map.ts","ts/constants/mapStyle.ts","ts/utils/googleMap.ts","ts/actions/actionTypes.ts","ts/actions/loading.ts","ts/actions/map.ts","ts/constants/api.ts","ts/actions/xhr.ts","ts/components/MapMarker.tsx","ts/components/Map.tsx","ts/utils/titleHelper.ts","ts/components/Visualisation/SentimentCard.tsx","ts/utils/string.ts","ts/constants/crimeRates.ts","ts/components/Visualisation/CrimeRateCard/DataTypeSelector.tsx","ts/components/Visualisation/CrimeRateCard/index.tsx","ts/constants/unemploymentRates.ts","ts/components/Visualisation/UnemploymentRateCard/YearSelector.tsx","ts/utils/unemploymentRates.ts","ts/components/Visualisation/UnemploymentRateCard/index.tsx","ts/components/Visualisation/index.tsx","ts/components/Spinner.tsx","ts/components/App.tsx","ts/reducers/mapReducer.ts","ts/reducers/xhrReducer.ts","ts/reducers/loadingReducer.ts","ts/reducers/index.ts","index.tsx"],"names":["Header","GOOGLE_MAP_API_KEY","ZOOM_BOUNDARY","featureType","elementType","stylers","visibility","saturation","lightness","weight","color","getAddressWithType","address","targetType","console","log","inspect","results","find","result","types","type","getCityAddressObject","getCityName","getLongName","cityAddressObject","components","address_components","long_name","short_name","getStateAddressObject","getStateName","stateAddressObject","getStateShortName","OVERVIEW_DATA_RECEIVED","UPDATE_LOADING_STATUS","LGA_DATA_RECEIVED","CLEAR_LGA_DATA","updateLoadingStatus","isLoading","payload","startLoading","stopLoading","UPDATE_MAP_CENTER_AND_ZOOM","UPDATE_LAST_CLICKED_INFO","updateLastClickedInfo","lastClickedInfo","reverseGeocoding","lat","lng","x","y","dispatch","fetch","builtReverseGeocodingUrl","then","res","ok","json","statusText","lga","cityName","overviewData","finally","MapMarker","prop","icon","faMapPin","style","fontSize","MapComponent","props","map","maps","dataLayer","handleMapApiLoad","initDataLayer","this","Data","loadGeoJson","center","zoom","showMarker","updateMapCenterAndZoom","getTheLocationInfo","id","yesIWantToUseGoogleMapApiInternals","bootstrapURLKeys","key","defaultCenter","defaultZoom","options","gestureHandling","zoomControl","fullscreenControl","maxZoom","minZoom","styles","mapStyle","onChange","onClick","onGoogleApiLoaded","Component","Map","connect","state","clickedLocationInfo","composeTitle","title","city","stateShortName","toUpperCase","SENTIMENT_COLOR_MAPPING","renderActiveShape","RADIAN","Math","PI","cx","cy","midAngle","innerRadius","outerRadius","startAngle","endAngle","fill","percent","sin","cos","sx","sy","mx","my","ex","ey","textAnchor","Sector","d","stroke","r","name","dy","value","toFixed","SentimentCard","sentiment","xhr","lgaData","overview","stateName","useState","activeIndex","setActiveIndex","Object","keys","length","hoverable","className","data","sum","split","string","charAt","slice","toLowerCase","join","has","currentCount","push","ResponsiveContainer","height","width","margin","left","right","Pie","dataKey","activeShape","isAnimationActive","onMouseEnter","_","index","entry","Cell","get","TOTAL_COUNT_VALUE","RATE_PER_100000","CRIME_RATE_LABEL_DETAILS","label","Option","Select","DataTypeSelector","handleChange","defaultValue","CrimeRateCard","unsortedData","crimeRates","sort","a","b","year","dataType","setDataType","top","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","formatter","Line","animationDuration","AVERAGE_VALUE","BAR_COLOR_MAPPING","BAR_LABEL_MAPPING","YearSelector","years","descendingYears","getQuarterLabel","quarter","season","getAverageUnemploymentQuarterRate","rate","rates","filter","reduce","getQuarterAverageRate","UnemploymentRateCard","unemploymentRates","dataOfYear","selectedYear","setSelectedYear","Array","from","Set","aggregatedData","dataOfTheYear","BarChart","layout","Bar","barSize","barData","Visualisation","span","Spinner","size","App","loading","getOverviewData","useEffect","INIT_STATE","tweetCount","LOADING_REDUCER_DEFAULT_VALUE","combineReducers","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d26e071.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <header>\n      <span>Twitter Sentiment Dashboard</span>\n    </header>\n  );\n};\n","export const GOOGLE_MAP_API_KEY = \"AIzaSyDZfLuvCy8Ec8FyyBAO60DR4IURGWvLMsA\";\n","import { ICoordinate, IZoomBoundary } from \"../interfaces/Map\";\n\nexport const DEFAULT_ZOOM: number = 7;\nexport const ZOOM_BOUNDARY: IZoomBoundary = { min: DEFAULT_ZOOM, max: 14 };\nexport const INITIAL_CENTER: ICoordinate = {\n  lng: 145.3327648384119,\n  lat: -36.45378603127134,\n};\n\nexport const GEOJSON_URL: string =\n  \"https://data.gov.au/geoserver/vic-local-government-areas-psma-administrative-boundaries/wfs?request=GetFeature&typeName=ckan_bdf92691_c6fe_42b9_a0e2_a4cd716fa811&outputFormat=json\";\n// \"https://elasticbeanstalk-ap-southeast-2-144912544139.s3-ap-southeast-2.amazonaws.com/vic_sa4.geojson\";\n","export default [\n  {\n    featureType: \"all\",\n    elementType: \"labels\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        saturation: 36,\n      },\n      // {\n      //   color: \"#000000\",\n      // },\n      {\n        lightness: 40,\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.text.stroke\",\n    stylers: [\n      {\n        visibility: \"on\",\n      },\n      // {\n      //   color: \"#000000\",\n      // },\n      {\n        lightness: 16,\n      },\n    ],\n  },\n  {\n    featureType: \"all\",\n    elementType: \"labels.icon\",\n    stylers: [\n      {\n        visibility: \"off\",\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.fill\",\n    stylers: [\n      // {\n      //   color: \"#000000\",\n      // },\n      {\n        lightness: 20,\n      },\n    ],\n  },\n  {\n    featureType: \"administrative\",\n    elementType: \"geometry.stroke\",\n    stylers: [\n      // {\n      //   color: \"#000000\",\n      // },\n      {\n        lightness: 17,\n      },\n      {\n        weight: 1.2,\n      },\n    ],\n  },\n  {\n    featureType: \"administrative.neighborhood\",\n    elementType: \"labels.text.fill\",\n    stylers: [\n      {\n        color: \"#707070\",\n      },\n    ],\n  },\n  {\n    featureType: \"water\",\n    elementType: \"geometry\",\n    stylers: [\n      {\n        lightness: 17,\n      },\n    ],\n  },\n];\n","import {\n  API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF,\n  API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF,\n} from \"../constants/api\";\nimport { GOOGLE_MAP_API_KEY } from \"../configurations/google\";\nimport { inspect } from \"util\";\n\nexport function builtReverseGeocodingUrl(lat: number, lng: number): string {\n  return `${API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF}${lat},${lng}${API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF}${GOOGLE_MAP_API_KEY}`;\n}\n\nexport function getFormattedAddress(address: any) {\n  console.log(`In getFormattedAddress, address = ${inspect(address)}`);\n\n  try {\n    return address.results[0].formatted_address;\n  } catch {\n    return \"\";\n  }\n}\n\nfunction getAddressWithType(address: any, targetType: string) {\n  console.log(\n    `In getAddressWithType, address = ${inspect(\n      address\n    )}, targetType = ${targetType}`\n  );\n\n  try {\n    return address.results.find((result: any) =>\n      result.types.find((type: any) => type === targetType)\n    );\n  } catch {\n    return null;\n  }\n}\n\nexport function getCityAddressObject(address: any) {\n  return getAddressWithType(address, \"administrative_area_level_2\");\n}\n\nexport function getCityName(address: any, getLongName = true) {\n  const cityAddressObject = getCityAddressObject(address);\n  if (cityAddressObject) {\n    const components = cityAddressObject.address_components[0];\n\n    return getLongName ? components.long_name : components.short_name;\n  }\n\n  return \"\";\n}\n\nexport function getStateAddressObject(address: any) {\n  return getAddressWithType(address, \"administrative_area_level_1\");\n}\n\nexport function getStateName(address: any, getLongName = true) {\n  const stateAddressObject = getStateAddressObject(address);\n  if (stateAddressObject) {\n    const components = stateAddressObject.address_components[0];\n    return getLongName ? components.long_name : components.short_name;\n  }\n\n  return \"\";\n}\n\nexport function getStateShortName(address: any) {\n  return getStateName(address, false);\n}\n","export const OVERVIEW_DATA_RECEIVED = \"OVERVIEW_DATA_RECEIVED\";\nexport const UPDATE_LOADING_STATUS = \"UPDATE_LOADING_STATUS\";\nexport const LGA_DATA_RECEIVED = \"LGA_DATA_RECEIVED\";\nexport const CLEAR_LGA_DATA = \"CLEAR_LGA_DATA\";\n","import { UPDATE_LOADING_STATUS } from \"./actionTypes\";\nimport { IAction } from \"../interfaces/action\";\n\nfunction updateLoadingStatus(isLoading = false): IAction<boolean> {\n  return {\n    type: UPDATE_LOADING_STATUS,\n    payload: isLoading,\n  };\n}\n\nexport const startLoading = () => updateLoadingStatus(true);\nexport const stopLoading = () => updateLoadingStatus();\n","import { Dispatch } from \"redux\";\nimport { IClickedInfo, ICoordinate, IMapInfo } from \"../interfaces/Map\";\nimport { IAction } from \"../interfaces/action\";\nimport {\n  builtReverseGeocodingUrl,\n  getCityAddressObject,\n  getCityName,\n  getStateShortName,\n} from \"../utils/googleMap\";\nimport { getDataOfLGA } from \"./xhr\";\nimport { CLEAR_LGA_DATA } from \"./actionTypes\";\n\nexport const UPDATE_MAP_CENTER_AND_ZOOM: string = \"UPDATE_MAP_CENTER_AND_ZOOM\";\nexport const UPDATE_LAST_CLICKED_INFO: string = \"UPDATE_LAST_CLICKED_INFO\";\n\nexport function updateMapCenterAndZoom(\n  center: ICoordinate,\n  zoom: number\n): IAction<IMapInfo> {\n  return {\n    type: UPDATE_MAP_CENTER_AND_ZOOM,\n    payload: { center, zoom },\n  };\n}\n\nexport function updateLastClickedInfo(\n  lastClickedInfo: IClickedInfo | null = null\n): IAction<IClickedInfo | null> {\n  return {\n    type: UPDATE_LAST_CLICKED_INFO,\n    payload: lastClickedInfo,\n  };\n}\n\nexport const reverseGeocoding =\n  ({ lat, lng, x, y }: IClickedInfo) =>\n  (dispatch: Dispatch) => {\n    dispatch(updateLastClickedInfo());\n\n    return fetch(builtReverseGeocodingUrl(lat, lng))\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res.statusText;\n      })\n      .then((address) => {\n        console.log(\"In reverseGeocoding, address =\", address);\n        console.log(\n          \"In reverseGeocoding, cityName =\",\n          getCityAddressObject(address)\n        );\n        dispatch(updateLastClickedInfo({ lat, lng, x, y, address }));\n\n        const cityName = getCityName(address, false);\n        if (address && getStateShortName(address) === \"VIC\") {\n          getDataOfLGA(cityName)(dispatch);\n        } else {\n          dispatch({ type: CLEAR_LGA_DATA });\n        }\n      });\n  };\n","export const API__GOOGLE_REVERSE_GEOCODING_FIRST_HALF: string =\n  \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\";\nexport const API__GOOGLE_REVERSE_GEOCODING_SECOND_HALF: string = \"&key=\";\n\nexport const API__GET_OVERALL_INFO = \"/api/Lga_Senti_Overview\";\nexport const API__GET_LGA_DATA = \"/api/Lga_Senti_Overview/\";\n","import { startLoading, stopLoading } from \"./loading\";\nimport { API__GET_LGA_DATA, API__GET_OVERALL_INFO } from \"../constants/api\";\nimport { Dispatch } from \"redux\";\nimport { LGA_DATA_RECEIVED, OVERVIEW_DATA_RECEIVED } from \"./actionTypes\";\nimport { IOverview } from \"../interfaces/overview\";\n\nexport function getOverviewData() {\n  return (dispatch: Dispatch) => {\n    dispatch(startLoading());\n\n    return fetch(API__GET_OVERALL_INFO)\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res.statusText;\n      })\n      .then((overviewData: IOverview) => {\n        console.log(\"overviewData =\", overviewData);\n        dispatch({ type: OVERVIEW_DATA_RECEIVED, payload: overviewData });\n      })\n      .finally(() => dispatch(stopLoading()));\n  };\n}\n\nexport function getDataOfLGA(lga: string) {\n  return (dispatch: Dispatch) => {\n    dispatch(startLoading());\n\n    return fetch(`${API__GET_LGA_DATA}${lga}`)\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        }\n\n        throw res.statusText;\n      })\n      .then((overviewData: IOverview) => {\n        console.log(\"overviewData =\", overviewData);\n        dispatch({ type: LGA_DATA_RECEIVED, payload: overviewData });\n      })\n      .finally(() => dispatch(stopLoading()));\n  };\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMapPin } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface MapMarkerOwnProps {\n  lat: number;\n  lng: number;\n}\n\ninterface MapMarkerProps extends MapMarkerOwnProps {}\n\nexport const MapMarker = (prop: MapMarkerProps) => {\n  return (\n    <FontAwesomeIcon\n      icon={faMapPin}\n      style={{\n        color: \"red\",\n        fontSize: \"1rem\",\n      }}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport GoogleMapReact, { ClickEventValue } from \"google-map-react\";\nimport { GOOGLE_MAP_API_KEY } from \"../configurations/google\";\nimport { connect } from \"react-redux\";\nimport { inspect } from \"util\";\nimport { Dispatch } from \"redux\";\n\nimport { IClickedInfo, ICoordinate } from \"../interfaces/Map\";\nimport { GEOJSON_URL, ZOOM_BOUNDARY } from \"../constants/map\";\nimport mapStyle from \"../constants/mapStyle\";\nimport { IState } from \"../reducers\";\nimport { reverseGeocoding, updateMapCenterAndZoom } from \"../actions/map\";\nimport { capitalizeString } from \"../utils/string\";\nimport { getStateShortName } from \"../utils/googleMap\";\nimport { MapMarker } from \"./MapMarker\";\n\ninterface IMapOwnProps {}\n\ninterface IMapStateProps {\n  center: ICoordinate;\n  zoom: number;\n  showMarker: boolean;\n  lastClickedInfo: IClickedInfo | null;\n}\n\ninterface IMapDispatchProps {\n  updateMapCenterAndZoom: (center: ICoordinate, zoom: number) => void;\n  getTheLocationInfo: (clickedLocationInfo: IClickedInfo) => void;\n}\n\ninterface IMapProps extends IMapOwnProps, IMapStateProps, IMapDispatchProps {}\n\nclass MapComponent extends Component<IMapProps> {\n  private map: any;\n  private maps: any;\n  private dataLayer: any;\n\n  constructor(props: IMapProps) {\n    super(props);\n  }\n\n  handleMapApiLoad = (map: any, maps: any) => {\n    this.map = map;\n    this.maps = maps;\n    this.initDataLayer();\n    // this.setDataStyle();\n  };\n\n  initDataLayer() {\n    console.log(\"this.map =\", this.map);\n    console.log(\"this.maps =\", this.maps);\n\n    if (this.maps) {\n      this.dataLayer = new this.maps.Data({ map: this.map });\n      this.dataLayer.loadGeoJson(GEOJSON_URL);\n    }\n  }\n\n  // setDataStyle = () => {\n  //   if (this.dataLayer) {\n  //     this.dataLayer.setStyle((feature: any) => {\n  //       const { minValue, maxValue, extractedMapData } = this.props;\n  //       const name = capitalizeString(feature.getProperty(\"vic_lga__3\"));\n\n  //       // console.log(\"in setDataStyle, name =\", name);\n  //       let colors = gradient(\"#be9283\", \"#621b47\", 7);\n\n  //       const valueOfThisLGA = extractedMapData.get(name);\n  //       // console.log(\"valueOfThisLGA =\", valueOfThisLGA);\n\n  //       const step = (maxValue - minValue) / 7;\n  //       let i = 0;\n  //       for (i = 0; i <= 6; i++) {\n  //         if (\n  //           valueOfThisLGA >= minValue + i * step &&\n  //           valueOfThisLGA <= minValue + (i + 1) * step\n  //         ) {\n  //           break;\n  //         }\n  //       }\n\n  //       // let fillColor = colors[i];\n\n  //       let fillColor = valueOfThisLGA === undefined ? \"#c7b79e\" : colors[i];\n\n  //       // console.log(\n  //       //   `valueOfThisLGA =${valueOfThisLGA}, LGA = ${name}, color = ${fillColor} colors = ${colors}, i = ${i}`\n  //       // );\n\n  //       return {\n  //         fillColor: fillColor,\n  //         strokeWeight: 0.25,\n  //         strokeColor: \"#ffffff\",\n  //         zIndex: 0,\n  //         fillOpacity: 0.7,\n  //       };\n  //     });\n  //   }\n  // };\n\n  render() {\n    const {\n      center,\n      zoom,\n      showMarker,\n      lastClickedInfo,\n      updateMapCenterAndZoom,\n      getTheLocationInfo,\n    } = this.props;\n    return (\n      <div id=\"map-container\">\n        <GoogleMapReact\n          yesIWantToUseGoogleMapApiInternals\n          bootstrapURLKeys={{ key: GOOGLE_MAP_API_KEY }}\n          defaultCenter={center}\n          defaultZoom={zoom}\n          options={{\n            gestureHandling: \"greedy\",\n            zoomControl: true,\n            fullscreenControl: false,\n            maxZoom: ZOOM_BOUNDARY.max,\n            minZoom: ZOOM_BOUNDARY.min,\n            styles: mapStyle,\n          }}\n          onChange={({ zoom, center }) => {\n            console.log(\n              `onChange trigerred, zoom = ${zoom}, center = ${inspect(center)}`\n            );\n            updateMapCenterAndZoom(center, zoom);\n          }}\n          onClick={getTheLocationInfo}\n          onGoogleApiLoaded={({ map, maps }) =>\n            this.handleMapApiLoad(map, maps)\n          }\n        >\n          {showMarker && (\n            <MapMarker lat={lastClickedInfo!.lat} lng={lastClickedInfo!.lng} />\n          )}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: IState): IMapStateProps => {\n  const { center, zoom, lastClickedInfo } = state.map;\n  const showMarker: boolean =\n    (lastClickedInfo && getStateShortName(lastClickedInfo.address) === \"VIC\") ??\n    false;\n\n  return { center, zoom, showMarker, lastClickedInfo };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): IMapDispatchProps => {\n  return {\n    updateMapCenterAndZoom: (center, zoom) =>\n      dispatch(updateMapCenterAndZoom(center, zoom)),\n    getTheLocationInfo: (clickedLocationInfo: IClickedInfo) =>\n      reverseGeocoding(clickedLocationInfo)(dispatch),\n  };\n};\n\nconst Map = connect(mapStateToProps, mapDispatchToProps)(MapComponent);\n\nexport { Map };\n","export const composeTitle = (\n  title: string,\n  state: string,\n  city: string,\n  stateShortName: string\n): string => {\n  if (\n    city &&\n    state &&\n    stateShortName &&\n    stateShortName.toUpperCase() === \"VIC\"\n  ) {\n    title = `${title} - ${city}, ${state}`;\n  } else {\n    title = `${title} - Victoria`;\n  }\n\n  return title;\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card } from \"antd\";\nimport {\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Sector,\n  PieChart as RechartPie,\n} from \"recharts\";\n\nimport {\n  getCityName,\n  getStateName,\n  getStateShortName,\n} from \"../../utils/googleMap\";\nimport { capitalizeString } from \"../../utils/string\";\nimport { IState } from \"../../reducers/index\";\nimport { ISentiment } from \"../../interfaces/overview\";\nimport { composeTitle } from \"../../utils/titleHelper\";\n\ninterface ISentimentCardOwnProps {}\n\ninterface ISentimentCardStateProps {\n  cityName: string;\n  stateName: string;\n  stateShortName: string;\n  sentiment: ISentiment | null;\n}\n\ninterface ISentimentCardProps\n  extends ISentimentCardOwnProps,\n    ISentimentCardStateProps {}\n\nconst SENTIMENT_COLOR_MAPPING = new Map([\n  [\"Negative\", \"#a52a2a\"],\n  [\"Positive\", \"#11c299\"],\n  [\"Neutral\", \"#ffbf00\"],\n]);\n\nconst renderActiveShape = (props: any) => {\n  const RADIAN = Math.PI / 180;\n  const {\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    startAngle,\n    endAngle,\n    fill,\n    payload,\n    percent,\n  } = props;\n  const sin = Math.sin(-RADIAN * midAngle);\n  const cos = Math.cos(-RADIAN * midAngle);\n  const sx = cx + (outerRadius + 10) * cos;\n  const sy = cy + (outerRadius + 10) * sin;\n  const mx = cx + (outerRadius + 30) * cos;\n  const my = cy + (outerRadius + 30) * sin;\n  const ex = mx + (cos >= 0 ? 1 : -1) * 22;\n  const ey = my;\n  const textAnchor = cos >= 0 ? \"start\" : \"end\";\n\n  return (\n    <g>\n      <Sector\n        cx={cx}\n        cy={cy}\n        innerRadius={innerRadius}\n        outerRadius={outerRadius}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        fill={fill}\n      />\n      <Sector\n        cx={cx}\n        cy={cy}\n        startAngle={startAngle}\n        endAngle={endAngle}\n        innerRadius={outerRadius + 6}\n        outerRadius={outerRadius + 10}\n        fill={fill}\n      />\n      <path\n        d={`M${sx},${sy}L${mx},${my}L${ex},${ey}`}\n        stroke={fill}\n        fill=\"none\"\n      />\n      <circle cx={ex} cy={ey} r={2} fill={fill} stroke=\"none\" />\n      <text\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\n        y={ey}\n        textAnchor={textAnchor}\n        fill={fill}\n      >\n        {payload.name}\n      </text>\n      <text\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\n        y={ey}\n        dy={20}\n        textAnchor={textAnchor}\n        fill=\"#333\"\n      >\n        {`Count: ${payload.value}`}\n      </text>\n      <text\n        x={ex + (cos >= 0 ? 1 : -1) * 12}\n        y={ey}\n        dy={40}\n        textAnchor={textAnchor}\n        fill=\"#333\"\n      >\n        {`${(percent * 100)?.toFixed(2)}%`}\n      </text>\n    </g>\n  );\n};\n\nconst SentimentCardComponent = ({\n  cityName,\n  stateName,\n  sentiment,\n  stateShortName,\n}: ISentimentCardProps) => {\n  // console.log(\"In SentimentCard, sentiment =\", sentiment);\n\n  const [activeIndex, setActiveIndex] = useState(0);\n  const title = composeTitle(\n    \"Tweet Sentiment Data\",\n    stateName,\n    cityName,\n    stateShortName\n  );\n\n  if (!sentiment || !Object.keys(sentiment).length) {\n    return (\n      <Card hoverable className=\"col-6 tweet-card xhr-data-card\" title={title}>\n        <div className={\"empty-data-cover\"}>\n          <h2>Oops, there are no Tweet sentiment data available...</h2>\n        </div>\n      </Card>\n    );\n  }\n\n  const data = [];\n  let sum = 0;\n  for (let type in sentiment) {\n    const name = capitalizeString(type);\n    console.log(`name = ${name}`);\n    if (SENTIMENT_COLOR_MAPPING.has(name)) {\n      const currentCount = sentiment[type];\n      data.push({ name, value: currentCount });\n      sum += currentCount;\n    }\n  }\n\n  return (\n    <Card hoverable className=\"col-6 tweet-card xhr-data-card\" title={title}>\n      <div className={\"data-presentation\"}>\n        <p>\n          <span>\n            <b>Number of tweets analysed: </b>\n          </span>\n          {sum}\n        </p>\n      </div>\n      <ResponsiveContainer height={\"100%\"} width={\"100%\"}>\n        <RechartPie height={150} margin={{ left: 150, right: 150 }}>\n          <Pie\n            data={data}\n            dataKey=\"value\"\n            startAngle={90}\n            endAngle={-270}\n            outerRadius={100}\n            activeIndex={activeIndex}\n            activeShape={renderActiveShape}\n            isAnimationActive={false}\n            onMouseEnter={(_: any, index: number) => setActiveIndex(index)}\n          >\n            {data.map((entry, index) => (\n              <Cell\n                key={`slice-${index}`}\n                fill={entry ? SENTIMENT_COLOR_MAPPING.get(entry.name) : \"\"}\n              />\n            ))}\n          </Pie>\n        </RechartPie>\n      </ResponsiveContainer>\n      {!Object.keys(sentiment).length && (\n        <div className={\"empty-data-cover\"}>\n          <h2>Oops, there are no Tweet sentiment data available...</h2>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  let sentiment = state.xhr?.lgaData?.sentiment ?? null;\n  if (!sentiment) {\n    sentiment = state.xhr?.overview?.sentiment ?? null;\n  }\n\n  const { lastClickedInfo } = state.map;\n\n  let cityName = \"\";\n  let stateName = \"\";\n  let stateShortName = \"\";\n\n  if (lastClickedInfo && lastClickedInfo.address) {\n    const { address } = lastClickedInfo;\n    cityName = getCityName(address);\n    stateName = getStateName(address);\n    stateShortName = getStateShortName(address);\n  }\n\n  return { sentiment, cityName, stateName, stateShortName };\n};\n\nconst SentimentCard = connect(mapStateToProps)(SentimentCardComponent);\n\nexport { SentimentCard };\n","export const capitalizeString = (targetingString: string): string => {\n  return targetingString\n    .split(\" \")\n    .map(\n      (string) => string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\n    )\n    .join(\" \");\n};\n","import { ILabelDetails } from \"../interfaces/visualisation\";\n\nexport const TOTAL_COUNT_VALUE: string = \"totalCount\";\nexport const RATE_PER_100000: string = \"ratePer100000population\";\n\nexport const CRIME_RATE_LABEL_DETAILS = new Map<string, ILabelDetails>([\n  [TOTAL_COUNT_VALUE, { label: \"Total Count\", color: \"#318ce7\" }],\n  [RATE_PER_100000, { label: \"Rate Per 100000 Population\", color: \"#008000\" }],\n]);\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport {\n  CRIME_RATE_LABEL_DETAILS,\n  RATE_PER_100000,\n  TOTAL_COUNT_VALUE,\n} from \"../../../constants/crimeRates\";\nconst { Option } = Select;\n\ninterface IDataTypeSelectorProps {\n  handleChange: (value: string) => void;\n}\n\nexport const DataTypeSelector = ({ handleChange }: IDataTypeSelectorProps) => {\n  return (\n    <div className=\"visualisation-selector\">\n      <span>Data Type: </span>\n      <Select\n        defaultValue={TOTAL_COUNT_VALUE}\n        style={{ width: 250 }}\n        onChange={handleChange}\n      >\n        <Option value={TOTAL_COUNT_VALUE}>\n          {CRIME_RATE_LABEL_DETAILS.get(TOTAL_COUNT_VALUE)!.label}\n        </Option>\n        <Option value={RATE_PER_100000}>\n          {CRIME_RATE_LABEL_DETAILS.get(RATE_PER_100000)!.label}\n        </Option>\n      </Select>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card } from \"antd\";\nimport {\n  CartesianGrid,\n  Line,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n  LineChart as RechartLine,\n} from \"recharts\";\n\nimport {\n  getCityName,\n  getStateName,\n  getStateShortName,\n} from \"../../../utils/googleMap\";\nimport { IState } from \"../../../reducers\";\nimport { ICrimeRate } from \"../../../interfaces/overview\";\nimport { DataTypeSelector } from \"./DataTypeSelector\";\nimport {\n  CRIME_RATE_LABEL_DETAILS,\n  TOTAL_COUNT_VALUE,\n} from \"../../../constants/crimeRates\";\nimport { composeTitle } from \"../../../utils/titleHelper\";\n\ninterface ICrimeRateCardOwnProps {}\n\ninterface ICrimeRateCardStateProps {\n  cityName: string;\n  stateName: string;\n  stateShortName: string;\n  data: ICrimeRate[];\n}\n\ninterface ICrimeRateCardProps\n  extends ICrimeRateCardOwnProps,\n    ICrimeRateCardStateProps {}\n\nconst CrimeRateCardComponent = ({\n  cityName,\n  stateName,\n  stateShortName,\n  data,\n}: ICrimeRateCardProps) => {\n  const title = composeTitle(\n    \"Crime Rates from 2011 to 2020\",\n    stateName,\n    cityName,\n    stateShortName\n  );\n\n  const [dataType, setDataType] = useState(TOTAL_COUNT_VALUE);\n\n  return (\n    <Card hoverable className=\"col-6 crime-rate-card\" title={title}>\n      <div className=\"visualisation-container\">\n        <DataTypeSelector handleChange={setDataType} />\n\n        <ResponsiveContainer>\n          <RechartLine\n            data={data}\n            width={730}\n            height={220}\n            margin={{ top: 5, right: 10, left: 10, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"year\" />\n            <YAxis type=\"number\" />\n            <Tooltip\n              formatter={(value: string, name: string) => {\n                return [value, CRIME_RATE_LABEL_DETAILS.get(dataType)!.label];\n              }}\n            />\n\n            <Line\n              type=\"monotone\"\n              dataKey={dataType}\n              stroke={CRIME_RATE_LABEL_DETAILS.get(dataType)!.color}\n              animationDuration={4000}\n            />\n          </RechartLine>\n        </ResponsiveContainer>\n      </div>\n      {data.length === 0 && (\n        <div className={\"empty-data-cover\"}>\n          <h2>Oops, there are no data available...</h2>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state: IState): ICrimeRateCardStateProps => {\n  const { lastClickedInfo } = state.map;\n\n  let unsortedData = state.xhr?.lgaData?.crimeRates ?? [];\n  if (!unsortedData.length) {\n    unsortedData = state.xhr?.overview?.crimeRates ?? [];\n  }\n\n  let cityName = \"\";\n  let stateName = \"\";\n  let stateShortName = \"\";\n\n  if (lastClickedInfo && lastClickedInfo.address) {\n    const { address } = lastClickedInfo;\n    cityName = getCityName(address);\n    stateName = getStateName(address);\n    stateShortName = getStateShortName(address);\n  }\n\n  const data = unsortedData.sort((a, b) => a.year - b.year);\n\n  return { cityName, stateName, data, stateShortName };\n};\n\nconst CrimeRateCard = connect(mapStateToProps)(CrimeRateCardComponent);\n\nexport { CrimeRateCard };\n","export const AVERAGE_LABEL: string = \"All Years\";\nexport const AVERAGE_VALUE: string = \"all\";\n\nexport const BAR_COLOR_MAPPING: Map<number, string> = new Map([\n  [1, \"#FF5666\"],\n  [2, \"#FCB07E\"],\n  [3, \"#EBE9E9\"],\n  [4, \"#2E5339\"],\n]);\n\nexport const BAR_LABEL_MAPPING: Map<number, string> = new Map([\n  [1, \"Summer\"],\n  [2, \"Autumn\"],\n  [3, \"Winter\"],\n  [4, \"Spring\"],\n]);\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport {\n  AVERAGE_LABEL,\n  AVERAGE_VALUE,\n} from \"../../../constants/unemploymentRates\";\nconst { Option } = Select;\n\ninterface IYearSelectorProps {\n  years: number[];\n  handleChange: (value: string) => void;\n}\n\nconst YearSelector = ({ years, handleChange }: IYearSelectorProps) => {\n  const descendingYears = years.sort((a, b) => b - a);\n  return (\n    <div className=\"visualisation-selector\">\n      <span>Year: </span>\n      <Select\n        defaultValue={AVERAGE_VALUE}\n        style={{ width: 250 }}\n        onChange={handleChange}\n      >\n        <Option value={AVERAGE_VALUE}>{AVERAGE_LABEL}</Option>\n        {descendingYears.map((year) => (\n          <Option key={year} value={`${year}`}>\n            {year}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nexport { YearSelector };\n","import { BAR_LABEL_MAPPING } from \"../constants/unemploymentRates\";\nimport { IUnemploymentQuarterRate } from \"../interfaces/overview\";\n\nexport const getQuarterLabel = (quarter: number): string => {\n  const season: string = BAR_LABEL_MAPPING.get(quarter)!;\n  switch (quarter) {\n    case 1:\n      return `1st Quarter (${season})`;\n    case 2:\n      return `2nd Quarter (${season})`;\n    case 3:\n      return `3rd Quarter (${season})`;\n    default:\n      return `4th Quarter (${season})`;\n  }\n};\n\nexport const getQuarterAverageRate = (\n  data: IUnemploymentQuarterRate[],\n  quarter: number\n): number => {\n  const rates = data.filter((d) => d.quarter === quarter).map((d) => d.rate);\n  const sum = rates.reduce((a, b) => a + b, 0);\n  const average = sum / rates.length || 0;\n  return average;\n};\n\nexport const getAverageUnemploymentQuarterRate = (\n  data: IUnemploymentQuarterRate[],\n  quarter: number\n): IUnemploymentQuarterRate => {\n  const average = getQuarterAverageRate(data, quarter);\n  return { quarter, rate: average };\n};\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card } from \"antd\";\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Tooltip,\n  XAxis,\n  YAxis,\n  Cell,\n  ResponsiveContainer,\n} from \"recharts\";\n\n// import { COLOR_MAPPING } from \"../../constants/covid19ColorMapping\";\n// import { STATE_MAPPING } from \"../../constants/states\";\nimport {\n  IUnemploymentQuarterRate,\n  IUnemploymentRate,\n} from \"../../../interfaces/overview\";\nimport { IState } from \"../../../reducers/index\";\nimport {\n  getCityName,\n  getStateName,\n  getStateShortName,\n} from \"../../../utils/googleMap\";\nimport { composeTitle } from \"../../../utils/titleHelper\";\nimport { YearSelector } from \"./YearSelector\";\nimport {\n  AVERAGE_VALUE,\n  BAR_COLOR_MAPPING,\n} from \"../../../constants/unemploymentRates\";\nimport {\n  getAverageUnemploymentQuarterRate,\n  getQuarterLabel,\n} from \"../../../utils/unemploymentRates\";\n\ninterface IUnemploymentRateCardOwnProps {}\n\ninterface IUnemploymentRateCardStateProps {\n  cityName: string;\n  stateName: string;\n  stateShortName: string;\n  data: IUnemploymentRate[];\n}\n\ninterface IUnemploymentRateCardProps\n  extends IUnemploymentRateCardOwnProps,\n    IUnemploymentRateCardStateProps {}\n\nconst UnemploymentRateCardComponent = ({\n  cityName,\n  stateName,\n  stateShortName,\n  data,\n}: IUnemploymentRateCardProps) => {\n  const [selectedYear, setSelectedYear] = useState(AVERAGE_VALUE);\n  const years: number[] = Array.from(new Set(data.map((rate) => rate.year)));\n\n  let title =\n    \"Unemployment Rates Per Quarter\" +\n    (selectedYear === AVERAGE_VALUE\n      ? \" from 2011 - 2020\"\n      : ` in ${selectedYear}`);\n\n  title = composeTitle(title, stateName, cityName, stateShortName);\n\n  let dataOfYear: IUnemploymentQuarterRate[];\n\n  if (selectedYear === AVERAGE_VALUE) {\n    const aggregatedData = data.map((d) => d.data);\n\n    dataOfYear = [\n      getAverageUnemploymentQuarterRate(aggregatedData, 1),\n      getAverageUnemploymentQuarterRate(aggregatedData, 2),\n      getAverageUnemploymentQuarterRate(aggregatedData, 3),\n      getAverageUnemploymentQuarterRate(aggregatedData, 4),\n    ];\n  } else {\n    dataOfYear = data\n      .filter((dataOfTheYear) => `${dataOfTheYear.year}` === selectedYear)\n      .map((dataOfTheYear) => dataOfTheYear.data);\n  }\n\n  return (\n    <Card hoverable className=\"col-6\" title={title}>\n      <div className=\"visualisation-container\">\n        <YearSelector years={years} handleChange={setSelectedYear} />\n        <ResponsiveContainer>\n          <BarChart\n            width={700}\n            height={250}\n            data={dataOfYear}\n            layout=\"vertical\"\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" />\n            <YAxis dataKey=\"quarter\" type=\"category\" width={80} />\n            <Tooltip\n              formatter={(value: number, name: string, props: any) => [\n                value?.toFixed(2),\n                getQuarterLabel(props.payload.quarter),\n              ]}\n            />\n            <Bar\n              dataKey={\"rate\"}\n              barSize={40}\n              animationDuration={4000}\n              name={\"Number\"}\n            >\n              {dataOfYear.map((barData, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={BAR_COLOR_MAPPING.get(barData.quarter)}\n                />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n      {data.length === 0 && (\n        <div className={\"empty-data-cover\"}>\n          <h2>Oops, there are no data available...</h2>\n        </div>\n      )}\n    </Card>\n  );\n};\n\nconst mapStateToProps = (state: IState) => {\n  const { lastClickedInfo } = state.map;\n\n  let unsortedData = state.xhr?.lgaData?.unemploymentRates ?? [];\n  if (!unsortedData.length) {\n    unsortedData = state.xhr?.overview?.unemploymentRates ?? [];\n  }\n\n  let cityName = \"\";\n  let stateName = \"\";\n  let stateShortName = \"\";\n\n  if (lastClickedInfo && lastClickedInfo.address) {\n    const { address } = lastClickedInfo;\n    cityName = getCityName(address);\n    stateName = getStateName(address);\n    stateShortName = getStateShortName(address);\n  }\n\n  const data = unsortedData.sort((a, b) => a.year - b.year);\n\n  return { cityName, stateName, data, stateShortName };\n};\n\nconst UnemploymentRateCard = connect(mapStateToProps)(\n  UnemploymentRateCardComponent\n);\n\nexport { UnemploymentRateCard };\n","import React from \"react\";\nimport { Col, Row } from \"antd\";\nimport { SentimentCard } from \"./SentimentCard\";\nimport { CrimeRateCard } from \"./CrimeRateCard\";\nimport { UnemploymentRateCard } from \"./UnemploymentRateCard\";\n\nexport const Visualisation = () => {\n  return (\n    <section id=\"visualisation\">\n      <Row>\n        <Col span={12}>\n          <SentimentCard />\n        </Col>\n        <Col span={12}>\n          <CrimeRateCard />\n        </Col>\n        <Col span={12}>\n          <UnemploymentRateCard />\n        </Col>\n      </Row>\n    </section>\n  );\n};\n","import React from \"react\";\nimport { Spin } from \"antd\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner-container\">\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport { Spinner };\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Header } from \"./Header\";\nimport { Map } from \"./Map\";\nimport { Visualisation } from \"./Visualisation\";\nimport { Spinner } from \"./Spinner\";\nimport { IState } from \"../reducers\";\nimport { Dispatch } from \"redux\";\nimport { getOverviewData } from \"../actions/xhr\";\n\ninterface IAppStateProps {\n  isLoading: boolean;\n}\n\ninterface IAppDispatchProps {\n  getOverviewData: () => void;\n}\n\ninterface IAppProps extends IAppStateProps, IAppDispatchProps {}\n\nconst AppComponent = ({ isLoading, getOverviewData }: IAppProps) => {\n  useEffect(() => {\n    getOverviewData();\n  }, [getOverviewData]);\n\n  return (\n    <div className=\"App\">\n      {isLoading && <Spinner />}\n      <Header />\n      <Map />\n      <Visualisation />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: IState): IAppStateProps => {\n  const { isLoading } = state.loading;\n  return { isLoading };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): IAppDispatchProps => {\n  return {\n    getOverviewData: () => {\n      getOverviewData()(dispatch);\n    },\n  };\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppComponent);\n\nexport default App;\n","import { DEFAULT_ZOOM, INITIAL_CENTER } from \"../constants/map\";\nimport { IClickedInfo, ICoordinate } from \"../interfaces/Map\";\nimport { IAction } from \"../interfaces/action\";\nimport {\n  UPDATE_MAP_CENTER_AND_ZOOM,\n  UPDATE_LAST_CLICKED_INFO,\n} from \"../actions/map\";\n\nexport interface IMapState {\n  center: ICoordinate;\n  zoom: number;\n  lastClickedInfo: IClickedInfo | null;\n}\n\nconst INIT_STATE: IMapState = {\n  center: INITIAL_CENTER,\n  zoom: DEFAULT_ZOOM,\n  lastClickedInfo: null,\n};\n\nexport const mapReducer = (\n  state: IMapState = INIT_STATE,\n  action: IAction\n): IMapState => {\n  switch (action.type) {\n    case UPDATE_MAP_CENTER_AND_ZOOM:\n      return { ...state, ...action.payload };\n    case UPDATE_LAST_CLICKED_INFO:\n      return { ...state, lastClickedInfo: action.payload };\n    default:\n      return state;\n  }\n};\n","import {\n  CLEAR_LGA_DATA,\n  LGA_DATA_RECEIVED,\n  OVERVIEW_DATA_RECEIVED,\n} from \"../actions/actionTypes\";\nimport { IAction } from \"../interfaces/action\";\nimport { IOverview } from \"../interfaces/overview\";\n\nexport interface IXHRState {\n  tweetCount: number;\n  overview: IOverview | null;\n  lgaData: IOverview | null;\n}\n\nconst INIT_STATE: IXHRState = {\n  tweetCount: 0,\n  overview: null,\n  lgaData: null,\n};\n\nexport function xhrReducer(state = INIT_STATE, action: IAction) {\n  switch (action.type) {\n    case OVERVIEW_DATA_RECEIVED:\n      return { ...state, overview: action.payload };\n    case LGA_DATA_RECEIVED:\n      return { ...state, lgaData: action.payload };\n    case CLEAR_LGA_DATA:\n      return { ...state, lgaData: null };\n    default:\n      return state;\n  }\n}\n","import { UPDATE_LOADING_STATUS } from \"../actions/actionTypes\";\nimport { IAction } from \"../interfaces/action\";\n\nexport interface ILoadingState {\n  isLoading: boolean;\n}\n\nconst LOADING_REDUCER_DEFAULT_VALUE: ILoadingState = {\n  isLoading: false,\n};\n\nexport function loadingReducer(\n  state = LOADING_REDUCER_DEFAULT_VALUE,\n  action: IAction\n) {\n  switch (action.type) {\n    case UPDATE_LOADING_STATUS:\n      return { ...state, ...action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { IMapState, mapReducer as map } from \"./mapReducer\";\nimport { IXHRState, xhrReducer as xhr } from \"./xhrReducer\";\nimport { ILoadingState, loadingReducer as loading } from \"./loadingReducer\";\n\nexport interface IState {\n  map: IMapState;\n  xhr: IXHRState;\n  loading: ILoadingState;\n}\n\nexport default combineReducers({ map, xhr, loading });\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./scss/index.scss\";\nimport App from \"./ts/components/App\";\nimport reducers from \"./ts/reducers\";\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}